
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIDnonassocOPEN_PARENTHESISAND ASSIGNMENT ATE CLOSE_BRACKET CLOSE_PARENTHESIS COLON COMMA DIVIDE ENTAO EQUAL ESCREVA FIM FLUTUANTE GREATER_EQUAL GREATER_THAN ID INTEIRO LEIA LESS_EQUAL LESS_THAN MINUS MULTIPLY NOT NOT_EQUAL N_FLOAT N_INT OPEN_BRACKET OPEN_PARENTHESIS OR PLUS REPITA RETORNA SE SENAO\n    program : declaration_list\n    \n    declaration_list : declaration_list declaration\n                     | declaration\n    \n    declaration : var_declaration\n                | var_init\n                | func_declaration\n    \n    var_declaration : type COLON var_list\n    \n    var_init : assignment\n    \n    index : index OPEN_BRACKET expression CLOSE_BRACKET\n          | OPEN_BRACKET expression CLOSE_BRACKET\n    \n    type : INTEIRO\n         | FLUTUANTE\n    \n    func_declaration : type header\n                    | header\n    \n    header : ID OPEN_PARENTHESIS params_list CLOSE_PARENTHESIS body FIM\n    \n    var_list : var_list COMMA var\n             | var\n    \n    var : ID\n        | ID index\n    \n    params_list : params_list COMMA param\n                | param\n                | empty\n    \n    param : type COLON ID\n          | param OPEN_BRACKET CLOSE_BRACKET\n    \n    body : body action\n         | empty\n    \n    action : expression\n           | var_declaration\n           | se\n           | repita\n           | leia\n           | escreva\n           | retorna\n    \n    se : SE expression ENTAO body FIM\n       | SE expression ENTAO body SENAO body FIM\n    \n    repita : REPITA body ATE expression\n    \n    assignment : var ASSIGNMENT expression\n    \n    leia : LEIA OPEN_PARENTHESIS var CLOSE_PARENTHESIS\n    \n    escreva : ESCREVA OPEN_PARENTHESIS expression CLOSE_PARENTHESIS\n    \n    retorna : RETORNA OPEN_PARENTHESIS expression CLOSE_PARENTHESIS\n    \n    expression : logic_expression\n               | assignment\n    \n    logic_expression : simple_expression\n                     | logic_expression logic_operator simple_expression\n    \n    simple_expression : additive_expression\n                      | simple_expression operator_relational additive_expression\n    \n    additive_expression : multiply_expression\n                        | additive_expression sum_operator multiply_expression\n    \n    multiply_expression : single_expression\n                        | multiply_expression multiply_operator single_expression\n    \n    single_expression : factor\n                      | sum_operator factor\n                      | NOT factor\n    \n    operator_relational : EQUAL\n                        | NOT_EQUAL\n                        | GREATER_THAN\n                        | GREATER_EQUAL\n                        | LESS_THAN\n                        | LESS_EQUAL\n    \n    sum_operator : PLUS\n                 | MINUS\n    \n    logic_operator : AND\n                   | OR\n    \n    multiply_operator : MULTIPLY\n                      | DIVIDE\n    \n    factor : OPEN_PARENTHESIS expression CLOSE_PARENTHESIS\n           | function_call\n           | var\n           | num\n    \n    num : N_INT\n        | N_FLOAT\n    \n    function_call : ID OPEN_PARENTHESIS arguments_list CLOSE_PARENTHESIS\n    \n    arguments_list : arguments_list COMMA expression\n                   | expression\n                   | empty\n    empty :'
    
_lr_action_items = {'INTEIRO':([0,2,3,4,5,6,8,9,14,16,19,20,22,23,24,25,26,27,28,29,30,31,32,34,35,38,39,42,43,66,67,68,69,71,72,76,77,78,79,80,84,85,86,87,91,92,94,95,96,97,98,99,100,101,102,105,111,115,120,121,122,123,124,125,126,127,128,],[10,10,-3,-4,-5,-6,-8,-14,-2,-13,10,-19,-7,-17,-18,-68,-37,-41,-42,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-76,10,-10,-16,-44,-46,-48,-50,-66,10,-26,-9,-72,-15,-25,-27,-28,-29,-30,-31,-32,-33,-76,10,-76,10,-36,-38,-39,-40,-34,-76,10,-35,]),'FLUTUANTE':([0,2,3,4,5,6,8,9,14,16,19,20,22,23,24,25,26,27,28,29,30,31,32,34,35,38,39,42,43,66,67,68,69,71,72,76,77,78,79,80,84,85,86,87,91,92,94,95,96,97,98,99,100,101,102,105,111,115,120,121,122,123,124,125,126,127,128,],[11,11,-3,-4,-5,-6,-8,-14,-2,-13,11,-19,-7,-17,-18,-68,-37,-41,-42,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-76,11,-10,-16,-44,-46,-48,-50,-66,11,-26,-9,-72,-15,-25,-27,-28,-29,-30,-31,-32,-33,-76,11,-76,11,-36,-38,-39,-40,-34,-76,11,-35,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,14,15,16,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,74,76,77,78,79,80,84,85,86,87,91,92,93,94,95,96,97,98,99,100,101,102,104,105,111,112,113,114,115,116,120,121,122,123,124,125,126,127,128,],[13,13,-3,-4,-5,-6,17,-8,-14,-11,-12,-2,24,-13,31,-19,31,-7,-17,-18,-68,-37,-41,-42,-43,-45,-18,-47,68,-49,-51,68,31,-67,-69,-60,-61,-70,-71,31,24,68,-62,-63,68,-54,-55,-56,-57,-58,-59,68,31,68,-64,-65,-52,-68,-18,-53,-76,90,-10,-16,-44,-46,-48,-50,-66,31,-26,-9,-72,31,-15,-25,-27,-28,-29,-30,-31,-32,-33,31,-76,31,24,31,31,-76,31,31,-36,-38,-39,-40,-34,-76,31,-35,]),'$end':([1,2,3,4,5,6,8,9,14,16,20,22,23,24,25,26,27,28,29,30,31,32,34,35,38,39,42,43,66,67,68,69,76,77,78,79,80,84,85,91,92,94,],[0,-1,-3,-4,-5,-6,-8,-14,-2,-13,-19,-7,-17,-18,-68,-37,-41,-42,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-10,-16,-44,-46,-48,-50,-66,-9,-72,-15,]),'COLON':([7,10,11,47,103,],[15,-11,-12,74,15,]),'ASSIGNMENT':([12,13,20,25,31,76,91,],[18,-18,-19,18,-18,-10,-9,]),'OPEN_PARENTHESIS':([13,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,76,77,78,79,80,84,85,86,87,91,92,93,95,96,97,98,99,100,101,102,104,105,106,107,108,111,113,114,115,116,120,121,122,123,124,125,126,127,128,],[19,19,37,-19,37,-7,-17,-18,-68,-37,-41,-42,-43,-45,62,-47,37,-49,-51,37,37,-67,-69,-60,-61,-70,-71,37,37,-62,-63,37,-54,-55,-56,-57,-58,-59,37,37,37,-64,-65,-52,-68,62,-53,-76,-10,-16,-44,-46,-48,-50,-66,37,-26,-9,-72,37,-25,-27,-28,-29,-30,-31,-32,-33,37,-76,112,113,114,37,37,37,-76,37,37,-36,-38,-39,-40,-34,-76,37,-35,]),'OPEN_BRACKET':([13,20,24,31,45,68,76,88,89,90,91,],[21,48,21,21,73,21,-10,73,-24,-23,-9,]),'NOT':([18,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,37,38,39,40,41,42,43,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,76,77,78,79,80,84,85,86,87,91,92,93,95,96,97,98,99,100,101,102,104,105,111,113,114,115,116,120,121,122,123,124,125,126,127,128,],[36,-19,36,-7,-17,-18,-68,-37,-41,-42,-43,-45,-18,-47,-49,-51,36,-67,-69,-60,-61,-70,-71,36,36,-62,-63,36,-54,-55,-56,-57,-58,-59,36,36,36,-64,-65,-52,-68,-18,-53,-76,-10,-16,-44,-46,-48,-50,-66,36,-26,-9,-72,36,-25,-27,-28,-29,-30,-31,-32,-33,36,-76,36,36,36,-76,36,36,-36,-38,-39,-40,-34,-76,36,-35,]),'PLUS':([18,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,37,38,39,40,41,42,43,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,76,77,78,79,80,84,85,86,87,91,92,93,95,96,97,98,99,100,101,102,104,105,111,113,114,115,116,120,121,122,123,124,125,126,127,128,],[40,-19,40,-7,-17,-18,-68,-37,-41,-42,-43,40,-18,-47,-49,-51,40,-67,-69,-60,-61,-70,-71,40,40,-62,-63,40,-54,-55,-56,-57,-58,-59,40,40,40,-64,-65,-52,-68,-18,-53,-76,-10,-16,-44,40,-48,-50,-66,40,-26,-9,-72,40,-25,-27,-28,-29,-30,-31,-32,-33,40,-76,40,40,40,-76,40,40,-36,-38,-39,-40,-34,-76,40,-35,]),'MINUS':([18,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,37,38,39,40,41,42,43,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,76,77,78,79,80,84,85,86,87,91,92,93,95,96,97,98,99,100,101,102,104,105,111,113,114,115,116,120,121,122,123,124,125,126,127,128,],[41,-19,41,-7,-17,-18,-68,-37,-41,-42,-43,41,-18,-47,-49,-51,41,-67,-69,-60,-61,-70,-71,41,41,-62,-63,41,-54,-55,-56,-57,-58,-59,41,41,41,-64,-65,-52,-68,-18,-53,-76,-10,-16,-44,41,-48,-50,-66,41,-26,-9,-72,41,-25,-27,-28,-29,-30,-31,-32,-33,41,-76,41,41,41,-76,41,41,-36,-38,-39,-40,-34,-76,41,-35,]),'N_INT':([18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,76,77,78,79,80,84,85,86,87,91,92,93,95,96,97,98,99,100,101,102,104,105,111,113,114,115,116,120,121,122,123,124,125,126,127,128,],[42,-19,42,-7,-17,-18,-68,-37,-41,-42,-43,-45,-18,-47,42,-49,-51,42,42,-67,-69,-60,-61,-70,-71,42,42,-62,-63,42,-54,-55,-56,-57,-58,-59,42,42,42,-64,-65,-52,-68,-18,-53,-76,-10,-16,-44,-46,-48,-50,-66,42,-26,-9,-72,42,-25,-27,-28,-29,-30,-31,-32,-33,42,-76,42,42,42,-76,42,42,-36,-38,-39,-40,-34,-76,42,-35,]),'N_FLOAT':([18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,48,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,76,77,78,79,80,84,85,86,87,91,92,93,95,96,97,98,99,100,101,102,104,105,111,113,114,115,116,120,121,122,123,124,125,126,127,128,],[43,-19,43,-7,-17,-18,-68,-37,-41,-42,-43,-45,-18,-47,43,-49,-51,43,43,-67,-69,-60,-61,-70,-71,43,43,-62,-63,43,-54,-55,-56,-57,-58,-59,43,43,43,-64,-65,-52,-68,-18,-53,-76,-10,-16,-44,-46,-48,-50,-66,43,-26,-9,-72,43,-25,-27,-28,-29,-30,-31,-32,-33,43,-76,43,43,43,-76,43,43,-36,-38,-39,-40,-34,-76,43,-35,]),'CLOSE_PARENTHESIS':([19,20,24,25,26,27,28,29,30,31,32,34,35,38,39,42,43,44,45,46,62,66,67,68,69,70,76,78,79,80,81,82,83,84,85,88,89,90,91,92,109,117,118,119,],[-76,-19,-18,-68,-37,-41,-42,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,71,-21,-22,-76,-52,-68,-18,-53,85,-10,-44,-46,-48,92,-74,-75,-50,-66,-20,-24,-23,-9,-72,-73,122,123,124,]),'COMMA':([19,20,22,23,24,25,26,27,28,29,30,31,32,34,35,38,39,42,43,44,45,46,62,66,67,68,69,76,77,78,79,80,81,82,83,84,85,88,89,90,91,92,109,],[-76,-19,50,-17,-18,-68,-37,-41,-42,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,72,-21,-22,-76,-52,-68,-18,-53,-10,-16,-44,-46,-48,93,-74,-75,-50,-66,-20,-24,-23,-9,-72,-73,]),'FIM':([20,22,23,24,25,26,27,28,29,30,31,32,34,35,38,39,42,43,66,67,68,69,71,76,77,78,79,80,84,85,86,87,91,92,95,96,97,98,99,100,101,102,115,120,121,122,123,124,125,126,127,128,],[-19,-7,-17,-18,-68,-37,-41,-42,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-76,-10,-16,-44,-46,-48,-50,-66,94,-26,-9,-72,-25,-27,-28,-29,-30,-31,-32,-33,-76,125,-36,-38,-39,-40,-34,-76,128,-35,]),'SE':([20,22,23,24,25,26,27,28,29,30,31,32,34,35,38,39,42,43,66,67,68,69,71,76,77,78,79,80,84,85,86,87,91,92,95,96,97,98,99,100,101,102,105,111,115,120,121,122,123,124,125,126,127,128,],[-19,-7,-17,-18,-68,-37,-41,-42,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-76,-10,-16,-44,-46,-48,-50,-66,104,-26,-9,-72,-25,-27,-28,-29,-30,-31,-32,-33,-76,104,-76,104,-36,-38,-39,-40,-34,-76,104,-35,]),'REPITA':([20,22,23,24,25,26,27,28,29,30,31,32,34,35,38,39,42,43,66,67,68,69,71,76,77,78,79,80,84,85,86,87,91,92,95,96,97,98,99,100,101,102,105,111,115,120,121,122,123,124,125,126,127,128,],[-19,-7,-17,-18,-68,-37,-41,-42,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-76,-10,-16,-44,-46,-48,-50,-66,105,-26,-9,-72,-25,-27,-28,-29,-30,-31,-32,-33,-76,105,-76,105,-36,-38,-39,-40,-34,-76,105,-35,]),'LEIA':([20,22,23,24,25,26,27,28,29,30,31,32,34,35,38,39,42,43,66,67,68,69,71,76,77,78,79,80,84,85,86,87,91,92,95,96,97,98,99,100,101,102,105,111,115,120,121,122,123,124,125,126,127,128,],[-19,-7,-17,-18,-68,-37,-41,-42,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-76,-10,-16,-44,-46,-48,-50,-66,106,-26,-9,-72,-25,-27,-28,-29,-30,-31,-32,-33,-76,106,-76,106,-36,-38,-39,-40,-34,-76,106,-35,]),'ESCREVA':([20,22,23,24,25,26,27,28,29,30,31,32,34,35,38,39,42,43,66,67,68,69,71,76,77,78,79,80,84,85,86,87,91,92,95,96,97,98,99,100,101,102,105,111,115,120,121,122,123,124,125,126,127,128,],[-19,-7,-17,-18,-68,-37,-41,-42,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-76,-10,-16,-44,-46,-48,-50,-66,107,-26,-9,-72,-25,-27,-28,-29,-30,-31,-32,-33,-76,107,-76,107,-36,-38,-39,-40,-34,-76,107,-35,]),'RETORNA':([20,22,23,24,25,26,27,28,29,30,31,32,34,35,38,39,42,43,66,67,68,69,71,76,77,78,79,80,84,85,86,87,91,92,95,96,97,98,99,100,101,102,105,111,115,120,121,122,123,124,125,126,127,128,],[-19,-7,-17,-18,-68,-37,-41,-42,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-76,-10,-16,-44,-46,-48,-50,-66,108,-26,-9,-72,-25,-27,-28,-29,-30,-31,-32,-33,-76,108,-76,108,-36,-38,-39,-40,-34,-76,108,-35,]),'ATE':([20,22,23,24,25,26,27,28,29,30,31,32,34,35,38,39,42,43,66,67,68,69,76,77,78,79,80,84,85,87,91,92,95,96,97,98,99,100,101,102,105,111,121,122,123,124,125,128,],[-19,-7,-17,-18,-68,-37,-41,-42,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-10,-16,-44,-46,-48,-50,-66,-26,-9,-72,-25,-27,-28,-29,-30,-31,-32,-33,-76,116,-36,-38,-39,-40,-34,-35,]),'SENAO':([20,22,23,24,25,26,27,28,29,30,31,32,34,35,38,39,42,43,66,67,68,69,76,77,78,79,80,84,85,87,91,92,95,96,97,98,99,100,101,102,115,120,121,122,123,124,125,128,],[-19,-7,-17,-18,-68,-37,-41,-42,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-10,-16,-44,-46,-48,-50,-66,-26,-9,-72,-25,-27,-28,-29,-30,-31,-32,-33,-76,126,-36,-38,-39,-40,-34,-35,]),'MULTIPLY':([20,25,31,32,34,35,38,39,42,43,66,67,68,69,76,80,84,85,91,92,],[-19,-68,-18,64,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-10,64,-50,-66,-9,-72,]),'DIVIDE':([20,25,31,32,34,35,38,39,42,43,66,67,68,69,76,80,84,85,91,92,],[-19,-68,-18,65,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-10,65,-50,-66,-9,-72,]),'EQUAL':([20,25,29,30,31,32,34,35,38,39,42,43,66,67,68,69,76,78,79,80,84,85,91,92,],[-19,-68,55,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-10,55,-46,-48,-50,-66,-9,-72,]),'NOT_EQUAL':([20,25,29,30,31,32,34,35,38,39,42,43,66,67,68,69,76,78,79,80,84,85,91,92,],[-19,-68,56,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-10,56,-46,-48,-50,-66,-9,-72,]),'GREATER_THAN':([20,25,29,30,31,32,34,35,38,39,42,43,66,67,68,69,76,78,79,80,84,85,91,92,],[-19,-68,57,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-10,57,-46,-48,-50,-66,-9,-72,]),'GREATER_EQUAL':([20,25,29,30,31,32,34,35,38,39,42,43,66,67,68,69,76,78,79,80,84,85,91,92,],[-19,-68,58,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-10,58,-46,-48,-50,-66,-9,-72,]),'LESS_THAN':([20,25,29,30,31,32,34,35,38,39,42,43,66,67,68,69,76,78,79,80,84,85,91,92,],[-19,-68,59,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-10,59,-46,-48,-50,-66,-9,-72,]),'LESS_EQUAL':([20,25,29,30,31,32,34,35,38,39,42,43,66,67,68,69,76,78,79,80,84,85,91,92,],[-19,-68,60,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-10,60,-46,-48,-50,-66,-9,-72,]),'AND':([20,25,27,29,30,31,32,34,35,38,39,42,43,66,67,68,69,76,78,79,80,84,85,91,92,],[-19,-68,52,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-10,-44,-46,-48,-50,-66,-9,-72,]),'OR':([20,25,27,29,30,31,32,34,35,38,39,42,43,66,67,68,69,76,78,79,80,84,85,91,92,],[-19,-68,53,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-10,-44,-46,-48,-50,-66,-9,-72,]),'CLOSE_BRACKET':([20,25,26,27,28,29,30,31,32,34,35,38,39,42,43,49,66,67,68,69,73,75,76,78,79,80,84,85,91,92,],[-19,-68,-37,-41,-42,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,76,-52,-68,-18,-53,89,91,-10,-44,-46,-48,-50,-66,-9,-72,]),'ENTAO':([20,25,26,27,28,29,30,31,32,34,35,38,39,42,43,66,67,68,69,76,78,79,80,84,85,91,92,110,],[-19,-68,-37,-41,-42,-43,-45,-18,-47,-49,-51,-67,-69,-70,-71,-52,-68,-18,-53,-10,-44,-46,-48,-50,-66,-9,-72,115,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,14,]),'var_declaration':([0,2,86,111,120,127,],[4,4,97,97,97,97,]),'var_init':([0,2,],[5,5,]),'func_declaration':([0,2,],[6,6,]),'type':([0,2,19,72,86,111,120,127,],[7,7,47,47,103,103,103,103,]),'assignment':([0,2,18,21,37,48,62,86,93,104,111,113,114,116,120,127,],[8,8,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'header':([0,2,7,],[9,9,16,]),'var':([0,2,15,18,21,33,36,37,48,50,51,54,61,62,63,86,93,104,111,112,113,114,116,120,127,],[12,12,23,25,25,67,67,25,25,77,67,67,67,25,67,25,25,25,25,117,25,25,25,25,25,]),'index':([13,24,31,68,],[20,20,20,20,]),'var_list':([15,],[22,]),'expression':([18,21,37,48,62,86,93,104,111,113,114,116,120,127,],[26,49,70,75,82,96,109,110,96,118,119,121,96,96,]),'logic_expression':([18,21,37,48,62,86,93,104,111,113,114,116,120,127,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'simple_expression':([18,21,37,48,51,62,86,93,104,111,113,114,116,120,127,],[29,29,29,29,78,29,29,29,29,29,29,29,29,29,29,]),'additive_expression':([18,21,37,48,51,54,62,86,93,104,111,113,114,116,120,127,],[30,30,30,30,30,79,30,30,30,30,30,30,30,30,30,30,]),'multiply_expression':([18,21,37,48,51,54,61,62,86,93,104,111,113,114,116,120,127,],[32,32,32,32,32,32,80,32,32,32,32,32,32,32,32,32,32,]),'sum_operator':([18,21,30,37,48,51,54,61,62,63,79,86,93,104,111,113,114,116,120,127,],[33,33,61,33,33,33,33,33,33,33,61,33,33,33,33,33,33,33,33,33,]),'single_expression':([18,21,37,48,51,54,61,62,63,86,93,104,111,113,114,116,120,127,],[34,34,34,34,34,34,34,34,84,34,34,34,34,34,34,34,34,34,]),'factor':([18,21,33,36,37,48,51,54,61,62,63,86,93,104,111,113,114,116,120,127,],[35,35,66,69,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'function_call':([18,21,33,36,37,48,51,54,61,62,63,86,93,104,111,113,114,116,120,127,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'num':([18,21,33,36,37,48,51,54,61,62,63,86,93,104,111,113,114,116,120,127,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'params_list':([19,],[44,]),'param':([19,72,],[45,88,]),'empty':([19,62,71,105,115,126,],[46,83,87,87,87,87,]),'logic_operator':([27,],[51,]),'operator_relational':([29,78,],[54,54,]),'multiply_operator':([32,80,],[63,63,]),'arguments_list':([62,],[81,]),'body':([71,105,115,126,],[86,111,120,127,]),'action':([86,111,120,127,],[95,95,95,95,]),'se':([86,111,120,127,],[98,98,98,98,]),'repita':([86,111,120,127,],[99,99,99,99,]),'leia':([86,111,120,127,],[100,100,100,100,]),'escreva':([86,111,120,127,],[101,101,101,101,]),'retorna':([86,111,120,127,],[102,102,102,102,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','parse.py',19),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parse.py',32),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parse.py',33),
  ('declaration -> var_declaration','declaration',1,'p_declaration','parse.py',50),
  ('declaration -> var_init','declaration',1,'p_declaration','parse.py',51),
  ('declaration -> func_declaration','declaration',1,'p_declaration','parse.py',52),
  ('var_declaration -> type COLON var_list','var_declaration',3,'p_var_declaration','parse.py',64),
  ('var_init -> assignment','var_init',1,'p_var_init','parse.py',79),
  ('index -> index OPEN_BRACKET expression CLOSE_BRACKET','index',4,'p_index','parse.py',91),
  ('index -> OPEN_BRACKET expression CLOSE_BRACKET','index',3,'p_index','parse.py',92),
  ('type -> INTEIRO','type',1,'p_type','parse.py',116),
  ('type -> FLUTUANTE','type',1,'p_type','parse.py',117),
  ('func_declaration -> type header','func_declaration',2,'p_func_declaration','parse.py',127),
  ('func_declaration -> header','func_declaration',1,'p_func_declaration','parse.py',128),
  ('header -> ID OPEN_PARENTHESIS params_list CLOSE_PARENTHESIS body FIM','header',6,'p_header','parse.py',142),
  ('var_list -> var_list COMMA var','var_list',3,'p_var_list','parse.py',164),
  ('var_list -> var','var_list',1,'p_var_list','parse.py',165),
  ('var -> ID','var',1,'p_var','parse.py',184),
  ('var -> ID index','var',2,'p_var','parse.py',185),
  ('params_list -> params_list COMMA param','params_list',3,'p_params_list','parse.py',200),
  ('params_list -> param','params_list',1,'p_params_list','parse.py',201),
  ('params_list -> empty','params_list',1,'p_params_list','parse.py',202),
  ('param -> type COLON ID','param',3,'p_param','parse.py',224),
  ('param -> param OPEN_BRACKET CLOSE_BRACKET','param',3,'p_param','parse.py',225),
  ('body -> body action','body',2,'p_body','parse.py',241),
  ('body -> empty','body',1,'p_body','parse.py',242),
  ('action -> expression','action',1,'p_action','parse.py',259),
  ('action -> var_declaration','action',1,'p_action','parse.py',260),
  ('action -> se','action',1,'p_action','parse.py',261),
  ('action -> repita','action',1,'p_action','parse.py',262),
  ('action -> leia','action',1,'p_action','parse.py',263),
  ('action -> escreva','action',1,'p_action','parse.py',264),
  ('action -> retorna','action',1,'p_action','parse.py',265),
  ('se -> SE expression ENTAO body FIM','se',5,'p_se','parse.py',277),
  ('se -> SE expression ENTAO body SENAO body FIM','se',7,'p_se','parse.py',278),
  ('repita -> REPITA body ATE expression','repita',4,'p_repita','parse.py',302),
  ('assignment -> var ASSIGNMENT expression','assignment',3,'p_assignment','parse.py',320),
  ('leia -> LEIA OPEN_PARENTHESIS var CLOSE_PARENTHESIS','leia',4,'p_leia','parse.py',336),
  ('escreva -> ESCREVA OPEN_PARENTHESIS expression CLOSE_PARENTHESIS','escreva',4,'p_escreva','parse.py',355),
  ('retorna -> RETORNA OPEN_PARENTHESIS expression CLOSE_PARENTHESIS','retorna',4,'p_retorna','parse.py',374),
  ('expression -> logic_expression','expression',1,'p_expression','parse.py',393),
  ('expression -> assignment','expression',1,'p_expression','parse.py',394),
  ('logic_expression -> simple_expression','logic_expression',1,'p_logic_expression','parse.py',407),
  ('logic_expression -> logic_expression logic_operator simple_expression','logic_expression',3,'p_logic_expression','parse.py',408),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression','parse.py',424),
  ('simple_expression -> simple_expression operator_relational additive_expression','simple_expression',3,'p_simple_expression','parse.py',425),
  ('additive_expression -> multiply_expression','additive_expression',1,'p_additive_expression','parse.py',441),
  ('additive_expression -> additive_expression sum_operator multiply_expression','additive_expression',3,'p_additive_expression','parse.py',442),
  ('multiply_expression -> single_expression','multiply_expression',1,'p_multiply_expression','parse.py',458),
  ('multiply_expression -> multiply_expression multiply_operator single_expression','multiply_expression',3,'p_multiply_expression','parse.py',459),
  ('single_expression -> factor','single_expression',1,'p_single_expression','parse.py',475),
  ('single_expression -> sum_operator factor','single_expression',2,'p_single_expression','parse.py',476),
  ('single_expression -> NOT factor','single_expression',2,'p_single_expression','parse.py',477),
  ('operator_relational -> EQUAL','operator_relational',1,'p_operator_relational','parse.py',498),
  ('operator_relational -> NOT_EQUAL','operator_relational',1,'p_operator_relational','parse.py',499),
  ('operator_relational -> GREATER_THAN','operator_relational',1,'p_operator_relational','parse.py',500),
  ('operator_relational -> GREATER_EQUAL','operator_relational',1,'p_operator_relational','parse.py',501),
  ('operator_relational -> LESS_THAN','operator_relational',1,'p_operator_relational','parse.py',502),
  ('operator_relational -> LESS_EQUAL','operator_relational',1,'p_operator_relational','parse.py',503),
  ('sum_operator -> PLUS','sum_operator',1,'p_sum_operator','parse.py',517),
  ('sum_operator -> MINUS','sum_operator',1,'p_sum_operator','parse.py',518),
  ('logic_operator -> AND','logic_operator',1,'p_logic_operator','parse.py',532),
  ('logic_operator -> OR','logic_operator',1,'p_logic_operator','parse.py',533),
  ('multiply_operator -> MULTIPLY','multiply_operator',1,'p_multiply_operator','parse.py',547),
  ('multiply_operator -> DIVIDE','multiply_operator',1,'p_multiply_operator','parse.py',548),
  ('factor -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS','factor',3,'p_factor','parse.py',562),
  ('factor -> function_call','factor',1,'p_factor','parse.py',563),
  ('factor -> var','factor',1,'p_factor','parse.py',564),
  ('factor -> num','factor',1,'p_factor','parse.py',565),
  ('num -> N_INT','num',1,'p_num','parse.py',585),
  ('num -> N_FLOAT','num',1,'p_num','parse.py',586),
  ('function_call -> ID OPEN_PARENTHESIS arguments_list CLOSE_PARENTHESIS','function_call',4,'p_function_call','parse.py',600),
  ('arguments_list -> arguments_list COMMA expression','arguments_list',3,'p_arguments_list','parse.py',619),
  ('arguments_list -> expression','arguments_list',1,'p_arguments_list','parse.py',620),
  ('arguments_list -> empty','arguments_list',1,'p_arguments_list','parse.py',621),
  ('empty -> <empty>','empty',0,'p_empty','parse.py',642),
]
